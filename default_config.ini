[Platform]
device = default
; cpu, cuda, xpu, default
master_port = random
world_size = auto
; 2, 3, 4, ..., the number of available gpus
; auto: world_size = the number of available gpus
seed = 1
output_dir = ./outputs
torch_dtype = float32
use_libuv = 0

[Example]
name = HJB2b
; HJB0, HJB0a, HJB0b, HJB0c
; HJB1, HJB1SingleX0
; HJB2, HJB2a, HJB2b, HJB2c
; HJB2bPba, HJB2bNonLin
; AllenCahnSin, Counter, AllenCahn, BSE, 
; AllenCahnSDGD, AllenCahnSDGDVlap, 
; QuasiSDGD, QuasiSDGDFullHess, AllenCahnSDGDMultiXrad
; EVP1, EVPFokkerPlanck
dim_x = 20
method_soc = SocMartNet
; SocMartNet, DfSocMartNet
method_pde = QuasiMartNet
; QuasiMartNet, DfQuasiMartNet
method_evp = DfEvMartNet
repeat_time = 5
save_result_for_every_repeat_time = True
num_cost_path = ${Training:batsize}
; only applicable to HJB examples, 
; the number of paths to compute the cost

[Network]
act_u = ReLU
act_v = ReLU
act_rho = LeakyReLU

num_hidden_u = 4
num_hidden_v = 4
num_hidden_rho = 0
width_u = 2 * ${Example:dim_x} + 100
width_v = 2 * ${Example:dim_x} + 100
width_rho = 600

rho_shell = sin
; sin or sigmoid
mulscale_rho = True
scale_factor = 100.

[Optimizer]
optimizer_u = RMSprop
optimizer_v = RMSprop
optimizer_lamb = RMSprop
optimizer_rho = RMSprop

lr0_u = 3 * 1e-3 / ${Example:dim_x}**0.5
lr0_v = ${lr0_u}
lr0_rho = 10 * ${lr0_v}
lr0_lamb = 1e-2
kwargs_u = {}
kwargs_v = {}
kwargs_rho = {}
kwargs_lamb = {}
decay_stepgap_u = 100
decay_stepgap_v = 100
decay_stepgap_rho = 100
decay_stepgap_lamb = 100
decay_rate_u = 1e-2**(${decay_stepgap_u} / ${Training:max_iter})
decay_rate_v = ${decay_rate_u}
decay_rate_rho = ${decay_rate_u}
decay_rate_lamb = 1e-1**(${decay_stepgap_u} / ${Training:max_iter})

[Training]
max_iter = 3000
num_dt = 100
epochsize = 10000
batsize = 256
syspath_as_pilpath = True
rate_newpath = 0.2
inner_step_descend = 2
inner_step_ascend = 1
